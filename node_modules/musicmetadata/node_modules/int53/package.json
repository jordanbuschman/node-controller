{
  "name": "int53",
  "version": "0.2.3",
  "description": "silly 53bit integer buffer serialization",
  "main": "index.js",
  "scripts": {
    "test": "node test.js"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/dannycoates/int53.git"
  },
  "keywords": [
    "int",
    "int64",
    "double",
    "number"
  ],
  "author": {
    "name": "Danny Coates",
    "email": "dannycoates@gmail.com"
  },
  "license": "BSD",
  "readme": "# int53\n\nserialization of 53-bit integers to and from 8 byte buffers.\n\n# usage\n\n```js\nvar int53 = require('int53')\n\nvar a = Buffer(8)\n\nint53.writeUInt64BE(0xFFFFFFFFFFF, a)\n\nvar b = Buffer('0000FFFFFFFFFFFF', 'hex')\n\nvar x = int53.readUInt64BE(b)\n```\n\n# API\n\n```js\nvar number = int53.readInt64BE(buffer, offset)\nvar number = int53.readInt64LE(buffer, offset)\nvar number = int53.readUInt64BE(buffer, offset)\nvar number = int53.readUInt64LE(buffer, offset)\n\nint53.writeInt64BE(number, buffer, offset)\nint53.writeInt64LE(number, buffer, offset)\nint53.writeUInt64BE(number, buffer, offset)\nint53.writeUInt64LE(number, buffer, offset)\n```\n\n## why?\n\nSometimes you need to read and write 64-bit integers. For some\nthings like timestamps, file sizes, and counters the 53-bits\noffered by a double is enough to get by, and easier to work with\nthan a bigint module.\n\n## License\n\nBSD\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/dannycoates/int53/issues"
  },
  "_id": "int53@0.2.3",
  "dist": {
    "shasum": "d000079460c5a40db30aae3f102052255f2b493c"
  },
  "_from": "int53@0.2.3",
  "_resolved": "https://registry.npmjs.org/int53/-/int53-0.2.3.tgz"
}
